"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ensureValidReceipt;

var _sha = _interopRequireDefault(require("sha256"));

var _verifierError = _interopRequireDefault(require("../models/verifierError"));

var SUB_STEPS = _interopRequireWildcard(require("../constants/verificationSubSteps"));

var _data = require("../helpers/data");

var _useCases = require("../domain/i18n/useCases");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ensureValidReceipt(receipt) {
  let proofHash = receipt.targetHash;
  const merkleRoot = receipt.merkleRoot;

  try {
    const proof = receipt.proof || receipt.path;
    const isProof = !!proof;

    if (isProof) {
      for (const index in proof) {
        const node = proof[index];
        let appendedBuffer;

        if (typeof node.left !== 'undefined') {
          appendedBuffer = (0, _data.toByteArray)(`${node.left}${proofHash}`);
          proofHash = (0, _sha.default)(appendedBuffer);
        } else if (typeof node.right !== 'undefined') {
          appendedBuffer = (0, _data.toByteArray)(`${proofHash}${node.right}`);
          proofHash = (0, _sha.default)(appendedBuffer);
        } else {
          throw new _verifierError.default(SUB_STEPS.checkReceipt, 'Trigger catch error.');
        }
      }
    }
  } catch (e) {
    throw new _verifierError.default(SUB_STEPS.checkReceipt, (0, _useCases.getText)('errors', 'ensureValidReceipt'));
  }

  if (proofHash !== merkleRoot) {
    throw new _verifierError.default(SUB_STEPS.checkReceipt, (0, _useCases.getText)('errors', 'invalidMerkleReceipt'));
  }
}