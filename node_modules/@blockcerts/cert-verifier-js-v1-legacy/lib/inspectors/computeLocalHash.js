"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = computeLocalHash;

require("core-js/modules/es.promise.js");

var _certificateVersions = require("../constants/certificateVersions");

var _config = _interopRequireDefault(require("../constants/config"));

var _jsonld = _interopRequireDefault(require("jsonld"));

var _verifierError = _interopRequireDefault(require("../models/verifierError"));

var SUB_STEPS = _interopRequireWildcard(require("../constants/verificationSubSteps"));

var _sha = _interopRequireDefault(require("sha256"));

var _constants = require("../constants");

var _data = require("../helpers/data");

var _useCases = require("../domain/i18n/useCases");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function setJsonLdDocumentLoader() {
  if (typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined') {
    return _jsonld.default.documentLoaders.xhr();
  }

  return _jsonld.default.documentLoaders.node();
}

function getUnmappedFields(normalized) {
  const myRegexp = /<http:\/\/fallback\.org\/(.*)>/;
  const matches = myRegexp.exec(normalized);

  if (matches) {
    const unmappedFields = [];

    for (let i = 0; i < matches.length; i++) {
      unmappedFields.push(matches[i]);
    }

    return unmappedFields;
  }

  return null;
}

async function computeLocalHash(document, version) {
  let expandContext = document['@context'];
  const theDocument = document;

  if (!(0, _certificateVersions.isV1)(version) && _config.default.CheckForUnmappedFields) {
    if (expandContext.find(x => x === Object(x) && '@vocab' in x)) {
      expandContext = null;
    } else {
      expandContext.push({
        '@vocab': 'http://fallback.org/'
      });
    }
  }

  const jsonldDocumentLoader = setJsonLdDocumentLoader();

  const customLoader = function (url, callback) {
    if (url in _constants.preloadedContexts) {
      return callback(null, {
        contextUrl: null,
        document: _constants.preloadedContexts[url],
        documentUrl: url
      });
    }

    return jsonldDocumentLoader(url, callback);
  };

  _jsonld.default.documentLoader = customLoader;
  const normalizeArgs = {
    algorithm: 'URDNA2015',
    format: 'application/nquads'
  };

  if (expandContext) {
    normalizeArgs.expandContext = expandContext;
  }

  return new Promise((resolve, reject) => {
    _jsonld.default.normalize(theDocument, normalizeArgs, (err, normalized) => {
      const isErr = !!err;

      if (isErr) {
        console.error(err);
        reject(new _verifierError.default(SUB_STEPS.computeLocalHash, (0, _useCases.getText)('errors', 'failedJsonLdNormalization')));
      } else {
        const unmappedFields = getUnmappedFields(normalized);

        if (unmappedFields) {
          reject(new _verifierError.default(SUB_STEPS.computeLocalHash, `${(0, _useCases.getText)('errors', 'foundUnmappedFields')}: ${unmappedFields.join(', ')}`));
        } else {
          resolve((0, _sha.default)((0, _data.toUTF8Data)(normalized)));
        }
      }
    });
  });
}