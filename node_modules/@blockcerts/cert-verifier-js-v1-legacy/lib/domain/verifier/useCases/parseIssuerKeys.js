"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseIssuerKeys;

var _date = require("../../../helpers/date");

var _constants = require("../../../constants");

var _models = require("../../../models");

var _useCases = require("../../i18n/useCases");

/**
 * createKeyObject
 *
 * @param rawKeyObject
 * @param finalPublicKey
 * @returns {Key}
 */
function createKeyObject(rawKeyObject, finalPublicKey = null) {
  const created = rawKeyObject.created ? (0, _date.dateToUnixTimestamp)(rawKeyObject.created) : null;
  const revoked = rawKeyObject.revoked ? (0, _date.dateToUnixTimestamp)(rawKeyObject.revoked) : null;
  const expires = rawKeyObject.expires ? (0, _date.dateToUnixTimestamp)(rawKeyObject.expires) : null; // backcompat for v2 alpha

  let publicKey = finalPublicKey;

  if (!finalPublicKey) {
    const publicKeyTemp = rawKeyObject.id || rawKeyObject.publicKey;
    publicKey = publicKeyTemp.replace('ecdsa-koblitz-pubkey:', '');
  }

  return new _models.Key(publicKey, created, revoked, expires);
}
/**
 * parseIssuerKeys
 *
 * @param issuerProfileJson
 */


function parseIssuerKeys(issuerProfileJson) {
  try {
    const keyMap = {};

    if ('@context' in issuerProfileJson) {
      // backcompat for v2 alpha
      const responseKeys = issuerProfileJson.publicKey || issuerProfileJson.publicKeys;

      for (let i = 0; i < responseKeys.length; i++) {
        const key = createKeyObject(responseKeys[i]);
        keyMap[key.publicKey] = key;
      }
    } else {
      // This is a v2 certificate with a v1 issuer
      const issuerKeys = issuerProfileJson.issuerKeys || [];
      const key = createKeyObject({}, issuerKeys[0].key);
      keyMap[key.publicKey] = key;
    }

    return keyMap;
  } catch (e) {
    throw new _models.VerifierError(_constants.SUB_STEPS.parseIssuerKeys, (0, _useCases.getText)('errors', 'parseIssuerKeys'));
  }
}