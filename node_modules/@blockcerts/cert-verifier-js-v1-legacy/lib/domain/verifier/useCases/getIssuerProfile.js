"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getIssuerProfile;

require("core-js/modules/es.promise.js");

var _services = require("../../../services");

var _models = require("../../../models");

var _constants = require("../../../constants");

var _useCases = require("../../i18n/useCases");

function isValidUrl(url) {
  // https://stackoverflow.com/a/15734347/4064775
  const regex = /^(ftp|http|https):\/\/[^ "]+$/;
  return regex.test(url);
}

function isValidV1Profile(profile) {
  // eslint-disable-next-line camelcase,@typescript-eslint/naming-convention
  const {
    issuer_key,
    revocation_key,
    issuerKeys,
    revocationKeys
  } = profile; // eslint-disable-next-line camelcase

  if (!!issuer_key && !!revocation_key) {
    // https://github.com/blockchain-certificates/cert-schema/blob/master/cert_schema/1.1/issuer-schema-v1-1.json
    return true;
  }

  if (issuerKeys && revocationKeys) {
    // https://github.com/blockchain-certificates/cert-schema/blob/master/cert_schema/1.2/issuer-id-1.2.json
    return true;
  }

  return false;
}
/**
 * getIssuerProfile
 *
 * @param issuerAddress: string
 * @returns {Promise<any>}
 */


async function getIssuerProfile(issuerAddress) {
  const errorMessage = (0, _useCases.getText)('errors', 'getIssuerProfile');

  if (!issuerAddress) {
    throw new _models.VerifierError(_constants.SUB_STEPS.getIssuerProfile, `${errorMessage} - ${(0, _useCases.getText)('errors', 'issuerProfileNotSet')}`);
  }

  if (typeof issuerAddress === 'object') {
    issuerAddress = issuerAddress.id;
  }

  if (!isValidUrl(issuerAddress)) {
    throw new _models.VerifierError(_constants.SUB_STEPS.getIssuerProfile, `${errorMessage} - ${(0, _useCases.getText)('errors', 'issuerProfileNotSet')}`);
  }

  let response = await (0, _services.request)({
    url: issuerAddress
  }).catch(() => {
    throw new _models.VerifierError(_constants.SUB_STEPS.getIssuerProfile, errorMessage);
  });
  response = JSON.parse(response);

  if (!isValidV1Profile(response)) {
    throw new _models.VerifierError(_constants.SUB_STEPS.getIssuerProfile, `${errorMessage} - ${(0, _useCases.getText)('errors', 'issuerProfileInvalid')}`);
  }

  return response;
}