"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.promise.js");

require("core-js/modules/es.symbol.description.js");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _domain = _interopRequireDefault(require("./domain"));

var _parser = _interopRequireDefault(require("./parser"));

var _verifier = _interopRequireDefault(require("./verifier"));

var _constants = require("./constants");

var _currentLocale = _interopRequireDefault(require("./constants/currentLocale"));

var _object = require("./helpers/object");

class Certificate {
  // v1
  // enum?
  // TODO: define metadataJson interface. As abstract as can be as keys and values are open.
  // TODO: not formally set in V3
  // TODO: define receipt interface for v1, v2
  // v1
  // v1
  // v1
  // v1
  // TODO: define verificationSteps interface.
  constructor(certificateDefinition, options = {}) {
    (0, _defineProperty2.default)(this, "certificateImage", void 0);
    (0, _defineProperty2.default)(this, "certificateJson", void 0);
    (0, _defineProperty2.default)(this, "chain", void 0);
    (0, _defineProperty2.default)(this, "description", void 0);
    (0, _defineProperty2.default)(this, "expires", void 0);
    (0, _defineProperty2.default)(this, "explorerAPIs", []);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "isFormatValid", void 0);
    (0, _defineProperty2.default)(this, "issuedOn", void 0);
    (0, _defineProperty2.default)(this, "issuer", void 0);
    (0, _defineProperty2.default)(this, "locale", void 0);
    (0, _defineProperty2.default)(this, "metadataJson", void 0);
    (0, _defineProperty2.default)(this, "name", void 0);
    (0, _defineProperty2.default)(this, "options", void 0);
    (0, _defineProperty2.default)(this, "publicKey", void 0);
    (0, _defineProperty2.default)(this, "rawTransactionLink", void 0);
    (0, _defineProperty2.default)(this, "receipt", void 0);
    (0, _defineProperty2.default)(this, "recipientFullName", void 0);
    (0, _defineProperty2.default)(this, "recordLink", void 0);
    (0, _defineProperty2.default)(this, "revocationKey", void 0);
    (0, _defineProperty2.default)(this, "sealImage", void 0);
    (0, _defineProperty2.default)(this, "signature", void 0);
    (0, _defineProperty2.default)(this, "signatureImage", void 0);
    (0, _defineProperty2.default)(this, "subtitle", void 0);
    (0, _defineProperty2.default)(this, "transactionId", void 0);
    (0, _defineProperty2.default)(this, "transactionLink", void 0);
    (0, _defineProperty2.default)(this, "verificationSteps", void 0);
    (0, _defineProperty2.default)(this, "version", void 0);

    // Options
    this._setOptions(options);

    if (typeof certificateDefinition !== 'object') {
      try {
        certificateDefinition = JSON.parse(certificateDefinition);
      } catch (err) {
        throw new Error(_domain.default.i18n.getText('errors', 'certificateNotValid'));
      }
    } // Keep certificate JSON object


    this.certificateJson = (0, _object.deepCopy)(certificateDefinition);
  }

  async init() {
    // Parse certificate
    await this.parseJson(this.certificateJson);
  }

  async parseJson(certificateDefinition) {
    const parsedCertificate = await (0, _parser.default)(certificateDefinition);

    if (!parsedCertificate.isFormatValid) {
      throw new Error(parsedCertificate.error);
    }

    this._setProperties(parsedCertificate);
  }

  async verify(stepCallback) {
    const verifier = new _verifier.default({
      certificateJson: this.certificateJson,
      chain: this.chain,
      expires: this.expires,
      id: this.id,
      issuer: this.issuer,
      receipt: this.receipt,
      revocationKey: this.revocationKey,
      transactionId: this.transactionId,
      version: this.version,
      explorerAPIs: (0, _object.deepCopy)(this.explorerAPIs)
    });
    return await verifier.verify(stepCallback);
  }

  _setOptions(options) {
    this.options = Object.assign({}, _constants.DEFAULT_OPTIONS, options); // Set locale

    this.locale = _domain.default.i18n.ensureIsSupported(this.options.locale === 'auto' ? _domain.default.i18n.detectLocale() : this.options.locale);
    this.explorerAPIs = this.options.explorerAPIs || [];
    _currentLocale.default.locale = this.locale;
  }

  _setProperties({
    certificateImage,
    chain,
    description,
    expires,
    id,
    isFormatValid,
    issuedOn,
    issuer,
    metadataJson,
    name,
    publicKey,
    receipt,
    recipientFullName,
    recordLink,
    revocationKey,
    sealImage,
    signature,
    signatureImage,
    subtitle,
    version
  }) {
    this.isFormatValid = isFormatValid;
    this.certificateImage = certificateImage;
    this.chain = chain;
    this.description = description;
    this.expires = expires;
    this.id = id;
    this.issuedOn = issuedOn;
    this.issuer = issuer;
    this.metadataJson = metadataJson;
    this.name = name;
    this.publicKey = publicKey;
    this.receipt = receipt;
    this.recipientFullName = recipientFullName;
    this.recordLink = recordLink;
    this.revocationKey = revocationKey;
    this.sealImage = sealImage;
    this.signature = signature;
    this.signatureImage = signatureImage;
    this.subtitle = subtitle; // Get the full verification step-by-step map

    this.verificationSteps = _domain.default.certificates.getVerificationMap(chain);
    this.version = version; // Transaction ID, link & raw link

    this._setTransactionDetails();
  }

  _setTransactionDetails() {
    this.transactionId = _domain.default.certificates.getTransactionId(this.receipt);
    this.rawTransactionLink = _domain.default.certificates.getTransactionLink(this.transactionId, this.chain, true);
    this.transactionLink = _domain.default.certificates.getTransactionLink(this.transactionId, this.chain);
  }

}

exports.default = Certificate;