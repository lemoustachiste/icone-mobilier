"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ensureValidReceipt;

var _sha = _interopRequireDefault(require("sha256"));

var _verifierError = _interopRequireDefault(require("../models/verifierError"));

var _verificationSubSteps = require("../constants/verificationSubSteps");

var _certificateVersions = require("../constants/certificateVersions");

var _data = require("../helpers/data");

var _useCases = require("../domain/i18n/useCases");

function ensureValidReceipt(receipt, version) {
  let proofHash = receipt.targetHash;
  const merkleRoot = receipt.merkleRoot;

  if ((0, _certificateVersions.isV3)(version) && !!receipt.proof) {
    throw new _verifierError.default(_verificationSubSteps.SUB_STEPS.checkReceipt, (0, _useCases.getText)('errors', 'invalidMerkleVersion'));
  }

  try {
    const proof = receipt.proof || receipt.path;
    const isProof = !!proof;

    if (isProof) {
      // eslint-disable-next-line @typescript-eslint/no-for-in-array
      for (const index in proof) {
        const node = proof[index];
        let appendedBuffer;

        if (typeof node.left !== 'undefined') {
          appendedBuffer = (0, _data.toByteArray)(`${node.left}${proofHash}`);
          proofHash = (0, _sha.default)(appendedBuffer);
        } else if (typeof node.right !== 'undefined') {
          appendedBuffer = (0, _data.toByteArray)(`${proofHash}${node.right}`);
          proofHash = (0, _sha.default)(appendedBuffer);
        } else {
          throw new _verifierError.default(_verificationSubSteps.SUB_STEPS.checkReceipt, 'Trigger catch error.');
        }
      }
    }
  } catch (e) {
    throw new _verifierError.default(_verificationSubSteps.SUB_STEPS.checkReceipt, (0, _useCases.getText)('errors', 'ensureValidReceipt'));
  }

  if (proofHash !== merkleRoot) {
    throw new _verifierError.default(_verificationSubSteps.SUB_STEPS.checkReceipt, (0, _useCases.getText)('errors', 'invalidMerkleReceipt'));
  }
}