"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = confirmDidSignature;

var _keyUtils = require("../helpers/keyUtils");

var _blockchains = require("../constants/blockchains");

var _issuingAddress = require("../helpers/issuingAddress");

const baseError = 'Issuer identity mismatch';

function getDocumentId(didDocument) {
  return didDocument.id;
}

function checkVerificationMethod(didDocument, verificationMethod) {
  const documentId = getDocumentId(didDocument);
  const verificationDid = verificationMethod.split('#')[0];
  return documentId === verificationDid;
}

function findVerificationMethodPublicKey(didDocument, verificationMethod) {
  const verificationMethodId = verificationMethod.split('#')[1];
  const verificationMethodFromDocument = didDocument.verificationMethod;
  return verificationMethodFromDocument.filter(verificationMethod => verificationMethod.id === `#${verificationMethodId}`)[0];
}

function retrieveIssuingAddress(verificationMethodPublicKey, chain) {
  const publicKey = (0, _keyUtils.publicKeyUInt8ArrayFromJwk)(verificationMethodPublicKey.publicKeyJwk);
  let address = '';

  switch (chain.code) {
    case _blockchains.SupportedChains.Bitcoin:
    case _blockchains.SupportedChains.Mocknet:
    case _blockchains.SupportedChains.Testnet:
      address = (0, _issuingAddress.computeBitcoinAddressFromPublicKey)(publicKey, chain);
      break;

    case _blockchains.SupportedChains.Ethmain:
    case _blockchains.SupportedChains.Ethropst:
    case _blockchains.SupportedChains.Ethrinkeby:
      address = (0, _issuingAddress.computeEthereumAddressFromPublicKey)(publicKey, chain);
      break;

    default:
      throw new Error('Unsupported chain for DID verification');
  }

  return address;
}

function confirmDidSignature({
  didDocument,
  proof,
  issuingAddress,
  chain
}) {
  try {
    const {
      verificationMethod
    } = proof;

    if (!checkVerificationMethod(didDocument, verificationMethod)) {
      throw new Error(`${baseError} - the identity document provided by the issuer does not match the verification method`);
    }

    const verificationMethodPublicKey = findVerificationMethodPublicKey(didDocument, verificationMethod);

    if (!verificationMethodPublicKey) {
      throw new Error(`${baseError} - the identity document provided by the issuer does not reference the verification method`);
    }

    if (issuingAddress !== retrieveIssuingAddress(verificationMethodPublicKey, chain)) {
      throw new Error(`${baseError} - the provided verification method does not match the issuer identity`);
    }

    return true;
  } catch (e) {
    console.error(e);
    throw new Error(`${baseError} - ${e.message}`);
  }
}