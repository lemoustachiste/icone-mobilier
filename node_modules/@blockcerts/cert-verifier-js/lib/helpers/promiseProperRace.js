"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PromiseProperRace;

require("core-js/modules/es.promise.js");

var _verifierError = _interopRequireDefault(require("../models/verifierError"));

var SUB_STEPS = _interopRequireWildcard(require("../constants/verificationSubSteps"));

var _debug = _interopRequireDefault(require("debug"));

var _useCases = require("../domain/i18n/useCases");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const log = (0, _debug.default)('blockchainConnectors');

function PromiseProperRace(promises, count, results = []) {
  // Source: https://blog.jcore.com/2016/12/18/promise-me-you-wont-use-promise-race/
  promises = Array.from(promises);

  if (promises.length < count) {
    return Promise.reject(new _verifierError.default(SUB_STEPS.fetchRemoteHash, (0, _useCases.getText)('errors', 'couldNotConfirmTx')));
  }

  const indexPromises = promises.map((p, index) => p.then(() => index).catch(err => {
    log(err);
    throw index;
  }));
  return Promise.race(indexPromises).then(index => {
    const p = promises.splice(index, 1)[0];
    p.then(e => results.push(e));

    if (count === 1) {
      return results;
    }

    return PromiseProperRace(promises, count - 1, results);
  }).catch(index => {
    promises.splice(index, 1);
    return PromiseProperRace(promises, count, results);
  });
}