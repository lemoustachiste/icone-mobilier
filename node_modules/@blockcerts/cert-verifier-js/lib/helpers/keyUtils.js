"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.privateKeyJwkFromPrivateKeyBase58 = exports.publicKeyJwkFromPublicKeyBase58 = exports.publicKeyHexFromPrivateKeyHex = exports.publicKeyUInt8ArrayFromPublicKeyBase58 = exports.privateKeyUInt8ArrayFromPrivateKeyBase58 = exports.privateKeyBase58FromPrivateKeyHex = exports.publicKeyBase58FromPublicKeyHex = exports.publicKeyUInt8ArrayFromJwk = exports.privateKeyUInt8ArrayFromJwk = exports.publicKeyHexFromJwk = exports.privateKeyHexFromJwk = exports.publicKeyJwkFromPublicKeyPem = exports.privateKeyJwkFromPrivateKeyPem = exports.publicKeyJwkFromPublicKeyHex = exports.privateKeyJwkFromPrivateKeyHex = exports.getKid = void 0;

require("core-js/modules/es.typed-array.sort.js");

var _keyto = _interopRequireDefault(require("@trust/keyto"));

var _base64url = _interopRequireDefault(require("base64url"));

var _crypto = _interopRequireDefault(require("crypto"));

var _bs = _interopRequireDefault(require("bs58"));

var _secp256k = _interopRequireDefault(require("secp256k1"));

var _buffer = require("buffer");

var _canonicalize = _interopRequireDefault(require("canonicalize"));

const buffer = typeof Buffer === 'undefined' ? _buffer.Buffer : Buffer;
const compressedHexEncodedPublicKeyLength = 66;
/** Secp256k1 Private Key  */

/**
 * Example
 * ```js
 * {
 *  kty: 'EC',
 *  crv: 'secp256k1',
 *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',
 *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',
 *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',
 *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'
 * }
 * ```
 * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.
 */
const getKid = jwk => {
  const copy = { ...jwk
  };
  delete copy.d;
  delete copy.kid;
  delete copy.alg;

  const digest = _crypto.default.createHash('sha256').update((0, _canonicalize.default)(copy)).digest();

  return _base64url.default.encode(buffer.from(digest));
};
/** convert compressed hex encoded private key to jwk */


exports.getKid = getKid;

const privateKeyJwkFromPrivateKeyHex = privateKeyHex => {
  const jwk = { ..._keyto.default.from(privateKeyHex, 'blk').toJwk('private'),
    crv: 'secp256k1'
  };
  const kid = getKid(jwk);
  return { ...jwk,
    kid
  };
};
/** convert compressed hex encoded public key to jwk */


exports.privateKeyJwkFromPrivateKeyHex = privateKeyJwkFromPrivateKeyHex;

const publicKeyJwkFromPublicKeyHex = publicKeyHex => {
  let key = publicKeyHex;

  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {
    const keyBin = _secp256k.default.publicKeyConvert(buffer.from(publicKeyHex, 'hex'), false);

    key = buffer.from(keyBin).toString('hex');
  }

  const jwk = { ..._keyto.default.from(key, 'blk').toJwk('public'),
    crv: 'secp256k1'
  };
  const kid = getKid(jwk);
  return { ...jwk,
    kid
  };
};
/** convert pem encoded private key to jwk */


exports.publicKeyJwkFromPublicKeyHex = publicKeyJwkFromPublicKeyHex;

const privateKeyJwkFromPrivateKeyPem = privateKeyPem => {
  const jwk = { ..._keyto.default.from(privateKeyPem, 'pem').toJwk('private'),
    crv: 'secp256k1'
  }; // console.log(jwk);

  const kid = getKid(jwk);
  return { ...jwk,
    kid
  };
};
/** convert pem encoded public key to jwk */


exports.privateKeyJwkFromPrivateKeyPem = privateKeyJwkFromPrivateKeyPem;

const publicKeyJwkFromPublicKeyPem = publicKeyPem => {
  const jwk = { ..._keyto.default.from(publicKeyPem, 'pem').toJwk('public'),
    crv: 'secp256k1'
  };
  const kid = getKid(jwk);
  return { ...jwk,
    kid
  };
};
/** convert jwk to hex encoded private key */


exports.publicKeyJwkFromPublicKeyPem = publicKeyJwkFromPublicKeyPem;

const privateKeyHexFromJwk = jwk => _keyto.default.from({ ...jwk,
  crv: 'K-256'
}, 'jwk').toString('blk', 'private');
/** convert jwk to hex encoded public key */


exports.privateKeyHexFromJwk = privateKeyHexFromJwk;

const publicKeyHexFromJwk = jwk => {
  const uncompressedPublicKey = _keyto.default.from({ ...jwk,
    crv: 'K-256'
  }, 'jwk').toString('blk', 'public');

  const compressed = _secp256k.default.publicKeyConvert(buffer.from(uncompressedPublicKey, 'hex'), true);

  return buffer.from(compressed).toString('hex');
};
/** convert jwk to binary encoded private key */


exports.publicKeyHexFromJwk = publicKeyHexFromJwk;

const privateKeyUInt8ArrayFromJwk = jwk => {
  const privateKeyHex = privateKeyHexFromJwk(jwk);
  let asBuffer = buffer.from(privateKeyHex, 'hex');
  let padding = 32 - asBuffer.length;

  while (padding > 0) {
    asBuffer = buffer.concat([buffer.from('00', 'hex'), asBuffer]);
    padding--;
  }

  return asBuffer;
};
/** convert jwk to binary encoded public key */


exports.privateKeyUInt8ArrayFromJwk = privateKeyUInt8ArrayFromJwk;

const publicKeyUInt8ArrayFromJwk = jwk => {
  const publicKeyHex = publicKeyHexFromJwk(jwk);
  let asBuffer = buffer.from(publicKeyHex, 'hex');
  let padding = 32 - asBuffer.length;

  while (padding > 0) {
    asBuffer = buffer.concat([buffer.from('00', 'hex'), asBuffer]);
    padding--;
  }

  return asBuffer;
};
/** convert publicKeyHex to base58 */


exports.publicKeyUInt8ArrayFromJwk = publicKeyUInt8ArrayFromJwk;

const publicKeyBase58FromPublicKeyHex = publicKeyHex => {
  return _bs.default.encode(buffer.from(publicKeyHex, 'hex'));
};
/** convert publicKeyHex to base58 */


exports.publicKeyBase58FromPublicKeyHex = publicKeyBase58FromPublicKeyHex;

const privateKeyBase58FromPrivateKeyHex = privateKeyHex => {
  return _bs.default.encode(buffer.from(privateKeyHex, 'hex'));
};

exports.privateKeyBase58FromPrivateKeyHex = privateKeyBase58FromPrivateKeyHex;

const privateKeyUInt8ArrayFromPrivateKeyBase58 = privateKeyBase58 => {
  return _bs.default.decode(privateKeyBase58);
};

exports.privateKeyUInt8ArrayFromPrivateKeyBase58 = privateKeyUInt8ArrayFromPrivateKeyBase58;

const publicKeyUInt8ArrayFromPublicKeyBase58 = publicKeyBase58 => {
  return _bs.default.decode(publicKeyBase58);
};

exports.publicKeyUInt8ArrayFromPublicKeyBase58 = publicKeyUInt8ArrayFromPublicKeyBase58;

const publicKeyHexFromPrivateKeyHex = privateKeyHex => {
  const publicKey = _secp256k.default.publicKeyCreate(new Uint8Array(buffer.from(privateKeyHex, 'hex')));

  return buffer.from(publicKey).toString('hex');
};

exports.publicKeyHexFromPrivateKeyHex = publicKeyHexFromPrivateKeyHex;

const publicKeyJwkFromPublicKeyBase58 = publicKeybase58 => {
  return publicKeyJwkFromPublicKeyHex(_bs.default.decode(publicKeybase58).toString('hex'));
};

exports.publicKeyJwkFromPublicKeyBase58 = publicKeyJwkFromPublicKeyBase58;

const privateKeyJwkFromPrivateKeyBase58 = privateKeyBase58 => {
  return privateKeyJwkFromPrivateKeyHex(_bs.default.decode(privateKeyBase58).toString('hex'));
};

exports.privateKeyJwkFromPrivateKeyBase58 = privateKeyJwkFromPrivateKeyBase58;