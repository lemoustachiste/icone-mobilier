"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.substepsList = exports.SUB_STEPS = void 0;

var _i18n = _interopRequireDefault(require("../data/i18n.json"));

var _verificationSteps = require("./verificationSteps");

var SUB_STEPS;
exports.SUB_STEPS = SUB_STEPS;

(function (SUB_STEPS) {
  SUB_STEPS["getTransactionId"] = "getTransactionId";
  SUB_STEPS["computeLocalHash"] = "computeLocalHash";
  SUB_STEPS["fetchRemoteHash"] = "fetchRemoteHash";
  SUB_STEPS["getIssuerProfile"] = "getIssuerProfile";
  SUB_STEPS["parseIssuerKeys"] = "parseIssuerKeys";
  SUB_STEPS["compareHashes"] = "compareHashes";
  SUB_STEPS["checkMerkleRoot"] = "checkMerkleRoot";
  SUB_STEPS["checkReceipt"] = "checkReceipt";
  SUB_STEPS["checkIssuerSignature"] = "checkIssuerSignature";
  SUB_STEPS["checkIssuerIdentity"] = "checkIssuerIdentity";
  SUB_STEPS["checkAuthenticity"] = "checkAuthenticity";
  SUB_STEPS["checkRevokedStatus"] = "checkRevokedStatus";
  SUB_STEPS["checkExpiresDate"] = "checkExpiresDate";
})(SUB_STEPS || (exports.SUB_STEPS = SUB_STEPS = {}));

function getTextFor(subStep, status) {
  return _i18n.default['en-US'].subSteps[`${subStep}${status}`];
}

const LABEL = 'Label';
const LABEL_PENDING = 'LabelPending';
const subStepsMap = {
  [_verificationSteps.VerificationSteps.formatValidation]: [SUB_STEPS.getTransactionId, SUB_STEPS.computeLocalHash, SUB_STEPS.fetchRemoteHash, SUB_STEPS.getIssuerProfile, SUB_STEPS.parseIssuerKeys],
  [_verificationSteps.VerificationSteps.hashComparison]: [SUB_STEPS.compareHashes, SUB_STEPS.checkMerkleRoot, SUB_STEPS.checkReceipt],
  [_verificationSteps.VerificationSteps.statusCheck]: [SUB_STEPS.checkIssuerIdentity, SUB_STEPS.checkIssuerSignature, SUB_STEPS.checkAuthenticity, SUB_STEPS.checkRevokedStatus, SUB_STEPS.checkExpiresDate]
};

function generateSubsteps(parentKey) {
  return subStepsMap[parentKey].reduce((acc, curr) => {
    acc[curr] = {
      code: curr,
      label: getTextFor(curr, LABEL),
      labelPending: getTextFor(curr, LABEL_PENDING),
      parentStep: parentKey
    };
    return acc;
  }, {});
}

const substepsList = Object.keys(subStepsMap).reduce((acc, parentStepKey) => {
  return Object.assign(acc, generateSubsteps(parentStepKey));
}, {});
exports.substepsList = substepsList;