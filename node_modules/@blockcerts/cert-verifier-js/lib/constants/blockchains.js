"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTestChain = isTestChain;
exports.BLOCKCHAINS = exports.SupportedChains = void 0;

var _api = require("./api");

let SupportedChains;
exports.SupportedChains = SupportedChains;

(function (SupportedChains) {
  SupportedChains["Bitcoin"] = "bitcoin";
  SupportedChains["Ethmain"] = "ethmain";
  SupportedChains["Ethropst"] = "ethropst";
  SupportedChains["Ethrinkeby"] = "ethrinkeby";
  SupportedChains["Mocknet"] = "mocknet";
  SupportedChains["Regtest"] = "regtest";
  SupportedChains["Testnet"] = "testnet";
})(SupportedChains || (exports.SupportedChains = SupportedChains = {}));

const BLOCKCHAINS = {
  [SupportedChains.Bitcoin]: {
    code: SupportedChains.Bitcoin,
    name: 'Bitcoin',
    prefixes: ['6a20', 'OP_RETURN '],
    signatureValue: 'bitcoinMainnet',
    transactionTemplates: {
      full: `https://blockchain.info/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`,
      raw: `https://blockchain.info/rawtx/${_api.TRANSACTION_ID_PLACEHOLDER}`
    }
  },
  [SupportedChains.Ethmain]: {
    code: SupportedChains.Ethmain,
    name: 'Ethereum',
    prefixes: ['0x'],
    signatureValue: 'ethereumMainnet',
    transactionTemplates: {
      full: `https://etherscan.io/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`,
      raw: `https://etherscan.io/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`
    }
  },
  [SupportedChains.Ethropst]: {
    code: SupportedChains.Ethropst,
    name: 'Ethereum Testnet',
    signatureValue: 'ethereumRopsten',
    transactionTemplates: {
      full: `https://ropsten.etherscan.io/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`,
      raw: `https://ropsten.etherscan.io/getRawTx?tx=${_api.TRANSACTION_ID_PLACEHOLDER}`
    }
  },
  [SupportedChains.Ethrinkeby]: {
    code: SupportedChains.Ethrinkeby,
    name: 'Ethereum Testnet',
    signatureValue: 'ethereumRinkeby',
    transactionTemplates: {
      full: `https://rinkeby.etherscan.io/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`,
      raw: `https://rinkeby.etherscan.io/getRawTx?tx=${_api.TRANSACTION_ID_PLACEHOLDER}`
    }
  },
  [SupportedChains.Mocknet]: {
    code: SupportedChains.Mocknet,
    name: 'Mocknet',
    test: true,
    signatureValue: 'mockchain',
    transactionTemplates: {
      full: '',
      raw: ''
    }
  },
  [SupportedChains.Regtest]: {
    code: SupportedChains.Regtest,
    name: 'Mocknet',
    test: true,
    signatureValue: 'bitcoinRegtest',
    transactionTemplates: {
      full: '',
      raw: ''
    }
  },
  [SupportedChains.Testnet]: {
    code: SupportedChains.Testnet,
    name: 'Bitcoin Testnet',
    signatureValue: 'bitcoinTestnet',
    transactionTemplates: {
      full: `https://testnet.blockchain.info/tx/${_api.TRANSACTION_ID_PLACEHOLDER}`,
      raw: `https://testnet.blockchain.info/rawtx/${_api.TRANSACTION_ID_PLACEHOLDER}`
    }
  }
}; // TODO: use test boolean from entry?

exports.BLOCKCHAINS = BLOCKCHAINS;

function isTestChain(chain) {
  return chain !== BLOCKCHAINS.bitcoin.code && chain !== BLOCKCHAINS.ethmain.code;
}